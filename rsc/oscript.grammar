oscript {
	
	%whitespace "[ \t\r\n]*";
	%left '&&' '||' '==' '>';
	%left '+' '-';
  %left '*' '/';
  %left '.' '(' ';' "return";
  %right '=';
  %none num;

  // main production
	oscript: function_def;
 	
	function_def: id "main" '(' func_args ')' scope;

	code: code code_block | code_block;
	scope: '{' code '}';

	code_block: 
		scope |
		expr ';' |

		"while" '(' expr ')' scope |
		"if" '(' expr ')' scope else
	;

	else: | "else" scope;

  call_args: | call_args ',' expr | expr;
  func_args: | func_args ',' id id | id id;

	// expretions. sourse of bytecode
  expr:
		creation_expr | 
		ariphmetic_expr |
	  boolean_ariphm_expr |
	  get_expr | 
	  call_expr |
		control_flow_expr
	;

	get_expr: expr '.' id;
	
	call_expr: expr '(' call_args ')';
	
	ariphmetic_expr:
	  expr '+' expr | 
	  expr '-' expr |
	  expr '*' expr |
	  expr '/' expr |
	  expr '=' expr |
	  '(' expr ')'
	;
	
	boolean_ariphm_expr:
	  expr '==' expr |
	  expr '>' expr |
	  "!" '(' expr ')' |
	  expr "&&" expr |  
		expr '||' expr
	;
	
	control_flow_expr:
		"return" expr |
		"return" |
	  "break"
	;
	
	creation_expr:
	  id id |
		id | val
	;

	val: str | num;
	num: int | flt;

	// tokens
	id: "[a-zA-Z_]+[0-9]*";
	str: "\"[a-zA-Z0-9 \n\r\t]*\"";
	int: "[0-9]+";
	flt: "[0-9]+.[0-9]+";
}